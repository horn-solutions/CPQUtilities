//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace CPQUtilities.WsSrv {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WsSrvSoap", Namespace="http://webcominc.com/")]
    public partial class WsSrv : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback doUSeeMeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserAdministrationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompanyAdministrationOperationCompleted;
        
        private System.Threading.SendOrPostCallback AUXTableAdministrationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SimpleProductAdministrationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportMaterialsFromERPOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpsertPricebookOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpsertPricebookWithDistributionChainOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WsSrv() {
            this.Url = global::CPQUtilities.Properties.Settings.Default.CPQUtilities_WsSrv_WsSrv;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event doUSeeMeCompletedEventHandler doUSeeMeCompleted;
        
        /// <remarks/>
        public event UserAdministrationCompletedEventHandler UserAdministrationCompleted;
        
        /// <remarks/>
        public event CompanyAdministrationCompletedEventHandler CompanyAdministrationCompleted;
        
        /// <remarks/>
        public event AUXTableAdministrationCompletedEventHandler AUXTableAdministrationCompleted;
        
        /// <remarks/>
        public event SimpleProductAdministrationCompletedEventHandler SimpleProductAdministrationCompleted;
        
        /// <remarks/>
        public event ImportMaterialsFromERPCompletedEventHandler ImportMaterialsFromERPCompleted;
        
        /// <remarks/>
        public event UpsertPricebookCompletedEventHandler UpsertPricebookCompleted;
        
        /// <remarks/>
        public event UpsertPricebookWithDistributionChainCompletedEventHandler UpsertPricebookWithDistributionChainCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webcominc.com/doUSeeMe", RequestNamespace="http://webcominc.com/", ResponseNamespace="http://webcominc.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string doUSeeMe(string username, string password) {
            object[] results = this.Invoke("doUSeeMe", new object[] {
                        username,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void doUSeeMeAsync(string username, string password) {
            this.doUSeeMeAsync(username, password, null);
        }
        
        /// <remarks/>
        public void doUSeeMeAsync(string username, string password, object userState) {
            if ((this.doUSeeMeOperationCompleted == null)) {
                this.doUSeeMeOperationCompleted = new System.Threading.SendOrPostCallback(this.OndoUSeeMeOperationCompleted);
            }
            this.InvokeAsync("doUSeeMe", new object[] {
                        username,
                        password}, this.doUSeeMeOperationCompleted, userState);
        }
        
        private void OndoUSeeMeOperationCompleted(object arg) {
            if ((this.doUSeeMeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.doUSeeMeCompleted(this, new doUSeeMeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webcominc.com/UserAdministration", RequestNamespace="http://webcominc.com/", ResponseNamespace="http://webcominc.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode UserAdministration(string userNameAtDomain, string password, string action, System.Xml.XmlNode xDoc) {
            object[] results = this.Invoke("UserAdministration", new object[] {
                        userNameAtDomain,
                        password,
                        action,
                        xDoc});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void UserAdministrationAsync(string userNameAtDomain, string password, string action, System.Xml.XmlNode xDoc) {
            this.UserAdministrationAsync(userNameAtDomain, password, action, xDoc, null);
        }
        
        /// <remarks/>
        public void UserAdministrationAsync(string userNameAtDomain, string password, string action, System.Xml.XmlNode xDoc, object userState) {
            if ((this.UserAdministrationOperationCompleted == null)) {
                this.UserAdministrationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserAdministrationOperationCompleted);
            }
            this.InvokeAsync("UserAdministration", new object[] {
                        userNameAtDomain,
                        password,
                        action,
                        xDoc}, this.UserAdministrationOperationCompleted, userState);
        }
        
        private void OnUserAdministrationOperationCompleted(object arg) {
            if ((this.UserAdministrationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserAdministrationCompleted(this, new UserAdministrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webcominc.com/CompanyAdministration", RequestNamespace="http://webcominc.com/", ResponseNamespace="http://webcominc.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CompanyAdministration(string userNameAtDomain, string password, string action, System.Xml.XmlNode xDoc) {
            object[] results = this.Invoke("CompanyAdministration", new object[] {
                        userNameAtDomain,
                        password,
                        action,
                        xDoc});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CompanyAdministrationAsync(string userNameAtDomain, string password, string action, System.Xml.XmlNode xDoc) {
            this.CompanyAdministrationAsync(userNameAtDomain, password, action, xDoc, null);
        }
        
        /// <remarks/>
        public void CompanyAdministrationAsync(string userNameAtDomain, string password, string action, System.Xml.XmlNode xDoc, object userState) {
            if ((this.CompanyAdministrationOperationCompleted == null)) {
                this.CompanyAdministrationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompanyAdministrationOperationCompleted);
            }
            this.InvokeAsync("CompanyAdministration", new object[] {
                        userNameAtDomain,
                        password,
                        action,
                        xDoc}, this.CompanyAdministrationOperationCompleted, userState);
        }
        
        private void OnCompanyAdministrationOperationCompleted(object arg) {
            if ((this.CompanyAdministrationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompanyAdministrationCompleted(this, new CompanyAdministrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webcominc.com/AUXTableAdministration", RequestNamespace="http://webcominc.com/", ResponseNamespace="http://webcominc.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode AUXTableAdministration(string userName, string password, string action, string tableName, System.Xml.XmlNode xDoc) {
            object[] results = this.Invoke("AUXTableAdministration", new object[] {
                        userName,
                        password,
                        action,
                        tableName,
                        xDoc});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AUXTableAdministrationAsync(string userName, string password, string action, string tableName, System.Xml.XmlNode xDoc) {
            this.AUXTableAdministrationAsync(userName, password, action, tableName, xDoc, null);
        }
        
        /// <remarks/>
        public void AUXTableAdministrationAsync(string userName, string password, string action, string tableName, System.Xml.XmlNode xDoc, object userState) {
            if ((this.AUXTableAdministrationOperationCompleted == null)) {
                this.AUXTableAdministrationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAUXTableAdministrationOperationCompleted);
            }
            this.InvokeAsync("AUXTableAdministration", new object[] {
                        userName,
                        password,
                        action,
                        tableName,
                        xDoc}, this.AUXTableAdministrationOperationCompleted, userState);
        }
        
        private void OnAUXTableAdministrationOperationCompleted(object arg) {
            if ((this.AUXTableAdministrationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AUXTableAdministrationCompleted(this, new AUXTableAdministrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webcominc.com/SimpleProductAdministration", RequestNamespace="http://webcominc.com/", ResponseNamespace="http://webcominc.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode SimpleProductAdministration(string userName, string password, string action, System.Xml.XmlNode xDoc) {
            object[] results = this.Invoke("SimpleProductAdministration", new object[] {
                        userName,
                        password,
                        action,
                        xDoc});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void SimpleProductAdministrationAsync(string userName, string password, string action, System.Xml.XmlNode xDoc) {
            this.SimpleProductAdministrationAsync(userName, password, action, xDoc, null);
        }
        
        /// <remarks/>
        public void SimpleProductAdministrationAsync(string userName, string password, string action, System.Xml.XmlNode xDoc, object userState) {
            if ((this.SimpleProductAdministrationOperationCompleted == null)) {
                this.SimpleProductAdministrationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSimpleProductAdministrationOperationCompleted);
            }
            this.InvokeAsync("SimpleProductAdministration", new object[] {
                        userName,
                        password,
                        action,
                        xDoc}, this.SimpleProductAdministrationOperationCompleted, userState);
        }
        
        private void OnSimpleProductAdministrationOperationCompleted(object arg) {
            if ((this.SimpleProductAdministrationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SimpleProductAdministrationCompleted(this, new SimpleProductAdministrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webcominc.com/ImportMaterialsFromERP", RequestNamespace="http://webcominc.com/", ResponseNamespace="http://webcominc.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ImportMaterialsFromERP(string userName, string password, System.Xml.XmlNode xDoc) {
            object[] results = this.Invoke("ImportMaterialsFromERP", new object[] {
                        userName,
                        password,
                        xDoc});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ImportMaterialsFromERPAsync(string userName, string password, System.Xml.XmlNode xDoc) {
            this.ImportMaterialsFromERPAsync(userName, password, xDoc, null);
        }
        
        /// <remarks/>
        public void ImportMaterialsFromERPAsync(string userName, string password, System.Xml.XmlNode xDoc, object userState) {
            if ((this.ImportMaterialsFromERPOperationCompleted == null)) {
                this.ImportMaterialsFromERPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportMaterialsFromERPOperationCompleted);
            }
            this.InvokeAsync("ImportMaterialsFromERP", new object[] {
                        userName,
                        password,
                        xDoc}, this.ImportMaterialsFromERPOperationCompleted, userState);
        }
        
        private void OnImportMaterialsFromERPOperationCompleted(object arg) {
            if ((this.ImportMaterialsFromERPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportMaterialsFromERPCompleted(this, new ImportMaterialsFromERPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webcominc.com/UpsertPricebook", RequestNamespace="http://webcominc.com/", ResponseNamespace="http://webcominc.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpsertPricebook(string username, string password, string pricebookCode, string dataXML) {
            object[] results = this.Invoke("UpsertPricebook", new object[] {
                        username,
                        password,
                        pricebookCode,
                        dataXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpsertPricebookAsync(string username, string password, string pricebookCode, string dataXML) {
            this.UpsertPricebookAsync(username, password, pricebookCode, dataXML, null);
        }
        
        /// <remarks/>
        public void UpsertPricebookAsync(string username, string password, string pricebookCode, string dataXML, object userState) {
            if ((this.UpsertPricebookOperationCompleted == null)) {
                this.UpsertPricebookOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpsertPricebookOperationCompleted);
            }
            this.InvokeAsync("UpsertPricebook", new object[] {
                        username,
                        password,
                        pricebookCode,
                        dataXML}, this.UpsertPricebookOperationCompleted, userState);
        }
        
        private void OnUpsertPricebookOperationCompleted(object arg) {
            if ((this.UpsertPricebookCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpsertPricebookCompleted(this, new UpsertPricebookCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webcominc.com/UpsertPricebookWithDistributionChain", RequestNamespace="http://webcominc.com/", ResponseNamespace="http://webcominc.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpsertPricebookWithDistributionChain(string username, string password, string distributionChain, string currency, string dataXML) {
            object[] results = this.Invoke("UpsertPricebookWithDistributionChain", new object[] {
                        username,
                        password,
                        distributionChain,
                        currency,
                        dataXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpsertPricebookWithDistributionChainAsync(string username, string password, string distributionChain, string currency, string dataXML) {
            this.UpsertPricebookWithDistributionChainAsync(username, password, distributionChain, currency, dataXML, null);
        }
        
        /// <remarks/>
        public void UpsertPricebookWithDistributionChainAsync(string username, string password, string distributionChain, string currency, string dataXML, object userState) {
            if ((this.UpsertPricebookWithDistributionChainOperationCompleted == null)) {
                this.UpsertPricebookWithDistributionChainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpsertPricebookWithDistributionChainOperationCompleted);
            }
            this.InvokeAsync("UpsertPricebookWithDistributionChain", new object[] {
                        username,
                        password,
                        distributionChain,
                        currency,
                        dataXML}, this.UpsertPricebookWithDistributionChainOperationCompleted, userState);
        }
        
        private void OnUpsertPricebookWithDistributionChainOperationCompleted(object arg) {
            if ((this.UpsertPricebookWithDistributionChainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpsertPricebookWithDistributionChainCompleted(this, new UpsertPricebookWithDistributionChainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void doUSeeMeCompletedEventHandler(object sender, doUSeeMeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class doUSeeMeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal doUSeeMeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void UserAdministrationCompletedEventHandler(object sender, UserAdministrationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserAdministrationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserAdministrationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void CompanyAdministrationCompletedEventHandler(object sender, CompanyAdministrationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompanyAdministrationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompanyAdministrationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AUXTableAdministrationCompletedEventHandler(object sender, AUXTableAdministrationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AUXTableAdministrationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AUXTableAdministrationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SimpleProductAdministrationCompletedEventHandler(object sender, SimpleProductAdministrationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SimpleProductAdministrationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SimpleProductAdministrationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ImportMaterialsFromERPCompletedEventHandler(object sender, ImportMaterialsFromERPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportMaterialsFromERPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportMaterialsFromERPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void UpsertPricebookCompletedEventHandler(object sender, UpsertPricebookCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpsertPricebookCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpsertPricebookCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void UpsertPricebookWithDistributionChainCompletedEventHandler(object sender, UpsertPricebookWithDistributionChainCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpsertPricebookWithDistributionChainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpsertPricebookWithDistributionChainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591